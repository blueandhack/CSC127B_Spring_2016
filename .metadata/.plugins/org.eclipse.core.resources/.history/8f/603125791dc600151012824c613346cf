/*
 * CSc 127B Spring 2016, Project 03
 *
 * Project Name: GameOfLife
 *
 * SL Letter: C 
 * Author: Yujia Lin 
 * SL Name: Cody Jensen
 *
 * ---
 */

public class GuitarString {

	// We're suggesting a few instance variables you will need.
	private ArrayQueue buffer; // Complete ArrayQueue before this class!
	private int tic;
	private int capacity;

	// This constructor is supplied for the purpose of testing. You know exactly
	// the elements to be added to the ArrayQueue because you have to supply a
	// completely initialized double[]. This constructor creates an ArrayQueue
	// of
	// capacity equal to the size of the array, and ini- tializes the contents
	// of
	// the buffer to the values in the array.
	public GuitarString(double[] init) {
		// TODO: Implement this method
	}

	// The constructor creates a ArrayQueue with the capacity of the ArrayQueue
	// as
	// the samplingRate divided by the frequency and rounded UP the nearest
	// whole
	// number. Once the ArrayQueue is created, it should be filled with 0's.
	public GuitarString(double frequency) {
		// TODO: Implement this method
	}

	// Replace all the items in the ring buffer with random values between -0.5
	// and +0.5. You will first have to dequeue all elements. Math.random()
	// returns a random floating point number from 0.0 to 1.0.
	public void pluck() {
		// TODO: Implement this method
	}

	// Apply the Karplus-Strong update. To do this, remove the sample at the
	// front
	// of the ArrayQueue. Use the sample that was removed and the sample that is
	// now at the front of the ArrayQueue and find their average. Multiply the
	// average of these two numbers with the energy decay factor. The energy
	// decay
	// factor is 0.996. Then, place the result at the end of the ArrayQueue.
	public void tic() {
		// TODO: Implement this method
	}

	// Return the value of the item at the front of the ring buffer
	public double sample() {
		// TODO: Implement this method
		return -999.99;
	}

	// Return the total number of times tic() was called on this instance.
	// This is a measure of how much time has elapsed.
	public int time() {
		// TODO: Implement this method
		return -999;
	}

	// Return the value for the maximum capacity of the ArrayQueue
	public int getCapacity() {
		// TODO: Implement this method
		return -999;
	}
}
